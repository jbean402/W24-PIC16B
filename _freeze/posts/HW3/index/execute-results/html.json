{
  "hash": "01d7ed64c4d271c2bcd0cdd10cfe8c67",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"HW 3: Flask App Development\"\nauthor: \"Justine Constantino\"\ndate: \"2024-03-17\"\ncategories: [week 3, Homework 3]\n---\n\n# Task: Develop and launch a Flask app that allows for message submissions and an option to view them. \n\nBefore starting, I had to import the following libraries in order to complete this assignment: \n\n::: {#d439a833 .cell execution_count=1}\n``` {.python .cell-code}\nfrom flask import Flask, g, render_template, request\nimport sqlite3\n```\n:::\n\n\nNext, create and launch the Flask app using this. \n\n::: {#9326cae0 .cell execution_count=2}\n``` {.python .cell-code}\napp = Flask(__name__)\n```\n:::\n\n\nHere is the GitHub Repository for this: [GitHub](https://github.com/jbean402/Flask-App-PIC16B/tree/main) \\ \n\nNow you are ready to start building your website! \n\n## 1. Enable submissions\nAs per the instructions, we are asked to create a `submit` template with three user inteface elements: \n\n* A text box for submitting a message. \n* A textbox for submitting the name of the user. \n* A \"submit\" button. \n\nI wrote the following code in the `submit.html` file first and I will explain as follows: \n```html\n{% extends 'base.html' %}\n\n{% block header %}\n<h1>{% block title %}Submit a Message{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n<form method=\"post\">\n    <label for=\"message\">Your message:</label>\n    <br>\n    <input type=\"text\" name=\"message\" id=\"message\">\n    <br>\n    <label for=\"name\">Your name or handle:</label>\n    <br>\n    <input type=\"text\" name=\"name\" id=\"name\">\n    <br>\n    <input type=\"submit\" value=\"Submit message\">\n</form>\n\n{% if (name) and (message) %}\n<br>\n<b>Hello {{name}}, Thank you for submitting your message! </b>\n{% else %}\n<b> Please submit all entries </b>\n{% endif %}\n{% endblock %}\n```\n#### **Explanation:** \\ \n\n* `{% extends 'base.html' %}` - This allows for an extension from the 'base.html' file and replaces the templates with the content on this page but still maintaining the navigation bar on top. \n* `<form method=\"post\">` Section - This block of content contains the necessary code in order to meet the submission requirements. \n    + The message allows for a text input from the user which creates a box. This is the same idea for the getting the name. \n    + 'Submit message' - This is the submission button. \n* The rest of the code simply outputs a message that thanks the user `{name}` for their input. \n\nBefore adding this to the `app.py`, we must build a SQL database and insertion function to store the messages. \n\n### Step 1b: Build `get_message_db()` \n\nThe purpose of this function allows for the creation of the `message` database. \\ \nIn order to build this, we must first check if the message table exists within the `message_db.sqlite`. We check this by writing a SQL query as so: \n```python\n    cursor.execute(\"CREATE TABLE IF NOT EXISTS messages (handle TEXT, message TEXT);\")\n```\n\nWe check if there is a database called `message_db` in the `g` attribute of the app. Then once there is confirmation, then we do not need to connect one. If there is, then that is when we are going to connect a new database. \\\nI wrote the following code to demonstrate this (which also includes the query): \n\n```python\ndef get_message_db():\n    # purpose: to handle a database full of messages \n    if 'db' not in g: \n       g.message_db = sqlite3.connect('message_db.sqlite')\n\n    conn = g.message_db\n    cursor = conn.cursor()\n\n    # creating the table if it does not exist \n    cursor.execute(\"CREATE TABLE IF NOT EXISTS messages (handle TEXT, message TEXT);\")\n\n    return g.message_db\n```\n\nNow you are done writing the `get_message_db()` function. \n\n### Step 1b: Build `insert_message(request) \n\nThis function handles inserting a user message into the database. \n\nRecall that we specified the `message` and `handle` objects in the `submit.html` file. We are going to retrieve those with the `request` function. \nWe are going to access them with the `request.form[\"message/name\"]` method. \n\nThis is how I built this function: \n```python\ndef insert_message(request):\n  # extracting the message and handle from the request \n  message = request.form[\"message\"]\n  handle = request.form[\"name\"]\n\n  db = get_message_db() \n  error = None # keeping track of empty messages \n\n  if error is None: \n     db.execute(\"INSERT INTO messages (handle, message) VALUES (?,?)\", (handle, message)) # query to add the messages to the db \n     db.commit() \n\n  db.close() \n\n  return message, handle\n```\n\nFinally, we are ready to build the `submit` app route. \n\n## 2. Create the `submit` app route on `app.py`. \n\nNext, we are going to interact with the `submit` function on the `app.py`. \n\nIn the `app.py`, this houses all the url routes to different pages in your website. \\ \nI wrote the following code in order to do this. \n\n```python\n@app.route('/send-message/', methods=['POST', 'GET'])\ndef send_message(): \n   if request.method == 'GET': \n    return render_template('submit.html')\n   \n   else:\n      try: \n        insert_message(request) # running insert message \n        return render_template('submit.html', name=request.form['name'], message=request.form['message']) # returns submit html with the successful submission\n      except: \n         return render_template('submit.html') \n```\n#### Explanation: \n\n* `@app.route('/send-messge/')` - This produces the URL extension so that we can access the submission page. \n* `send_message()` - This function handles the SQL database that stores the messages.\n* `insert_message(request)` - This calls the function that inserts the message into the SQL database. \n* `render_template('submit.html')` - This calls the template to be shown on the screen when this URL/page is being accesssed. Here, it will show what we wrote for the submissions category. \n\nIf you run the website, this is what it looks like! \n\n![Completed submission area](submit-complete.png)\n\n## 3. View a Random Message\n\nWe are tasked to build a way to view the messages on the navigation. \n\nBefore we start, we first make `View a Random Message` an option on the navigation bar. \n\n```html\n<li><a href=\"{{ url_for('view') }}\">View a Random Message</a></li>\n```\n![Navigation Bar](nav-bar.png)\n\nThen, we are going to make a function `random_messages(n)` that helps show the submissions (name and handle) to the user. \n\n* This communicates with the `get_message_db` function, meaning that it communicates with the SQL database that we created earlier. \n\n```python\ndef random_messages(n): \n   \"\"\"\n   Returns random messages\n   \"\"\"\n\n   db = get_message_db() \n   cursor = db.cursor() \n  \n   cursor.execute(\"SELECT message, handle FROM messages ORDER BY RANDOM() LIMIT (?)\", (n,))\n   messages = cursor.fetchall()\n\n   db.close() \n\n   return messages \n```\n\n### Explanation: \n\n* SQL query `cursor.execute(\"SELECT message, handle FROM messages ORDER BY RANDOM() LIMIT (?)\", (n,))` - This selects the message and handle value from the table `messages` in a random order and only takes 5 of them at a single time. \n\nNow, we are going to create a `view.html` file that creates another page to view the messages. \n\nSimilar to the `submit.html` file, this will create extend the `base.html` we made so that the navigation bar still exists. \n\n```html\n{% extends 'base.html' %}\n\n{% block header %}\n<h1>{% block title %}View some epic messages!{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  {% for content in message_list %}\n  <br>\n  <b>{{content.0}}</b>\n  <br>\n  <i>{{content.1}}</i>\n  <br>\n  {% endfor %}\n{% endblock %}\n```\n\n### Explanation: \n\n* The `{% for content in message_list %}` loop will go through the messages, then select and display them randomly on the screen. \n\nAfter we created this, we will go back to the `app.py` so that we can build a URL route to access this page. \n\n```python\n@app.route('/view/')\ndef view(): \n  limit = 5\n  mylist=random_messages(limit) # runs the random amt of messages\n  return render_template('view.html', message_list = mylist)\n```\n\n### Explanation: \n\n* `limit = 5` - This limits the amount of messages that the function will output to 5. \n* Similar process to the previous routes, it will call the function and render the template that we created.\n\nAfter that is complete, this is what your website should look like: \n\n![View Messages](view-messages.png)\n\nAnd that's it for the tutorial! Congratulations, you have a complete website! \n\n## Takeaways:\n\n* One of the things that was most challenging was understanding how the app.routes and the templates connected to one another. I kept running into `Internal server errors` all the time when trying to connect them. After reading a few tutorials, I managed to do them. \n* Web dev is fun! I really like playing around with the design and learning the back end work was super neat! :D \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}